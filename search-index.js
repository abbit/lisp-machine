var searchIndex = JSON.parse('{\
"lispdm":{"doc":"LispDM is a Scheme interpreter. Currently, it supports …","t":"NENNNDDNNNNEGNIGNENNNNNNNGEGENNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Any","Arity","AtLeast","Boolean","Char","Engine","EnvRef","Err","Err","EvalError","Exact","Expr","Exprs","Float","FromExpr","FromExprResult","Integer","LispDMError","List","Ok","Ok","ParseError","Port","Procedure","Procedure","ProcedureFn","ProcedureKind","ProcedureResult","ProcedureReturn","Range","SpecialForm","String","Symbol","TailCall","Value","Void","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","copy","current_input_port","current_output_port","cwd","default","default","env","eq","eq","eq","eq","eval","exprs","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_expr","from_expr","get","get_expr","has","has_macro","into","into","into","into","into","into","into","into","is_boolean","is_char","is_dotted_list","is_empty_list","is_float","is_integer","is_list","is_port","is_procedure","is_proper_list","is_root","is_specific_symbol","is_string","is_symbol","is_truthy","is_void","kind","new_dotted_list","new_empty_list","new_proper_list","new_string","new_symbol","new_without_prelude","register_fn","set","set_current_input_port","set_current_output_port","set_cwd","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"lispdm"],[167,"alloc::string"],[168,"core::convert"],[169,"core::cell"],[170,"alloc::rc"],[171,"std::path"],[172,"core::result"],[173,"core::fmt"],[174,"core::fmt"],[175,"alloc::vec"],[176,"core::option"],[177,"alloc::string"]],"d":["Any number of arguments.","Represents the arity of a procedure.","At least this many arguments.","Boolean","Character","Provides the main functionality of LispDM.","Reference to the environment.","Contains the error value","Contains the error value","Error occurred while evaluating expressions.","Exact number of arguments.","Represents all possible values in interpreter.","A list of <code>Expr</code>s. Also can be created with <code>exprs!</code> macro.","Real number","The exit point for turning <code>Expr</code> into Rust types.","Represents result of conversion from <code>Expr</code> to another type","Integer number","Error type that represents all possible errors in LispDM.","An immutable list of expressions.","Contains the success value","Contains the success value","Error occurred while parsing source code.","Port","Procedure","A normal procedure. Arguments <em>are</em> evaluated before the …","The type of a procedure function.","Represents the kind of a procedure.","The result of a procedure call.","The return value of a procedure. Used to determine whether …","From min to max arguments.","A special form. Arguments <em>are not</em> evaluated before the …","A reference to mutable string.","Symbol","Perform a tail call of <code>Expr</code> in <code>EnvRef</code>.","Return <code>Expr</code>.","Unspecified value","Adds a new binding to the environment. If the binding …","","","","","","","","","","","","","","","","","","","","","","","Creates a reference to the deep copy of underlying …","Returns the current input port of the environment.","Returns the current output port of the environment.","Returns the current working directory of the environment.","","","Returns reference to the root environment.","","","","","Evaluates the given source code and returns the result. …","A helper macro to construct <code>Exprs</code> from given expressions","Creates a reference to a new environment that has this …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Tries to convert <code>Expr</code> into <code>Self</code>. Returns …","","<code>get_expr</code> with a type conversion.","Returns the expression bound to <code>name</code>. If the no expression …","Checks if <code>self</code> contains a binding with <code>name</code>.","Checks if <code>self</code> contains a macro with <code>name</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Tries to convert <code>self</code> into <code>T</code>, which is a type that …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if <code>self</code> is a <code>Expr::Boolean</code>","Checks if <code>self</code> is a <code>Expr::Char</code>","Checks if <code>self</code> represents a dotted list This means that …","Checks if <code>self</code> represents an empty list <code>&#39;()</code>","Checks if <code>self</code> is a <code>Expr::Float</code>","Checks if <code>self</code> is a <code>Expr::Integer</code>","checks if <code>self</code> is a <code>Expr::List</code>","Checks if <code>self</code> is a <code>Expr::Port</code>","Checks if <code>self</code> is a <code>Expr::Procedure</code>","Checks if <code>self</code> represents a proper list","Checks if <code>self</code> is the root environment.","Checks if <code>self</code> is a <code>Expr::Symbol</code> with given <code>name</code>","Checks if <code>self</code> is a <code>Expr::String</code>","Checks if <code>self</code> is a <code>Expr::Symbol</code>","Returns true if <code>self</code> represents a true value","Checks if <code>self</code> is a <code>Expr::Void</code>","Returns string representation of the type of <code>self</code>","Creates new dotted list like <code>&#39;(1 2 . 3)</code> from <code>Exprs</code>","Creates new empty list <code>&#39;()</code>","Creates new proper list like <code>&#39;(1 2 3)</code> from <code>Exprs</code>","Creates new <code>Expr::String</code> from any type that implements …","Creates new <code>Expr::Symbol</code> from any type that implements …","Creates a new instance of <code>Engine</code> without loading the …","Registers a new procedure in the root environment. Can be …","Sets new value to an existing binding. Returns an <code>Err</code> if …","Sets the current input port of the environment.","Sets the current output port of the environment.","Sets the current working directory of the environment.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[7,0,7,4,4,0,0,14,30,15,7,0,0,4,0,0,4,0,4,14,30,15,4,4,6,0,0,0,0,7,6,4,4,31,31,4,1,31,11,1,4,6,7,15,31,11,1,4,6,7,15,1,4,6,7,1,4,6,7,1,1,1,1,11,1,11,1,4,6,7,11,0,1,1,4,4,6,7,7,15,15,31,11,1,4,4,4,4,4,4,4,4,4,4,6,7,15,17,4,1,1,1,1,31,11,1,4,4,6,7,15,4,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,4,4,4,4,4,4,11,11,1,1,1,1,1,4,6,7,4,7,15,31,11,1,4,6,7,15,31,11,1,4,6,7,15,31,11,1,4,6,7,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,-1],3,[[5,[4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[4,4],[6,6],[7,7],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[1,1],[1,[[9,[[8,[0]]]]]],[1,[[9,[[8,[0]]]]]],[1,10],[[],11],[[],1],[11,1],[[1,1],12],[[4,4],12],[[6,6],12],[[7,7],12],[[11,13],[[16,[[14,[-1]],15]]],17],0,[1,1],[[1,18],19],[[4,18],19],[[4,18],19],[[6,18],19],[[7,18],19],[[7,18],19],[[15,18],19],[[15,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[20,[-1]]],4,[[5,[4]]]],[21,4],[12,4],[-1,-1,[]],[13,4],[[[3,[-1,-2]]],4,[[5,[4]]],[[5,[4]]]],[22,4],[[[23,[-1]]],4,[[5,[4]]]],[2,4],[24,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,[[14,[-1]]],[]],[4,[[14,[4]]]],[[1,13],[[25,[[14,[-1]]]]],17],[[1,13],[[25,[4]]]],[[1,13],12],[[1,13],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[14,[-1]]],17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,12],[4,12],[4,12],[4,12],[4,12],[4,12],[4,12],[4,12],[4,12],[4,12],[1,12],[[4,13],12],[4,12],[4,12],[4,12],[4,12],[4,13],[26,4],[[],4],[26,4],[-1,4,[[5,[2]]]],[-1,4,[[5,[2]]]],[[],11],[[11,-1,6,7,27],3,28],[[1,2,-1],[[16,[3,2]]],[[5,[4]]]],[[1,[9,[[8,[0]]]]],3],[[1,[9,[[8,[0]]]]],3],[[1,10],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]]],"c":[],"p":[[3,"EnvRef",0],[3,"String",167],[15,"tuple"],[4,"Expr",0],[8,"Into",168],[4,"ProcedureKind",0],[4,"Arity",0],[3,"RefCell",169],[3,"Rc",170],[3,"PathBuf",171],[3,"Engine",0],[15,"bool"],[15,"str"],[6,"FromExprResult",0],[4,"LispDMError",0],[4,"Result",172],[8,"FromExpr",0],[3,"Formatter",173],[6,"Result",173],[3,"VecDeque",174],[15,"i64"],[15,"char"],[3,"Vec",175],[15,"f64"],[4,"Option",176],[6,"Exprs",0],[6,"ProcedureFn",0],[8,"ToString",167],[3,"TypeId",177],[6,"ProcedureResult",0],[4,"ProcedureReturn",0]],"b":[[74,"impl-Debug-for-Expr"],[75,"impl-Display-for-Expr"],[77,"impl-Debug-for-Arity"],[78,"impl-Display-for-Arity"],[79,"impl-Display-for-LispDMError"],[80,"impl-Debug-for-LispDMError"],[84,"impl-From%3CVecDeque%3CT%3E%3E-for-Expr"],[85,"impl-From%3Ci64%3E-for-Expr"],[86,"impl-From%3Cbool%3E-for-Expr"],[88,"impl-From%3C%26str%3E-for-Expr"],[89,"impl-From%3C(A,+B)%3E-for-Expr"],[90,"impl-From%3Cchar%3E-for-Expr"],[91,"impl-From%3CVec%3CT%3E%3E-for-Expr"],[92,"impl-From%3CString%3E-for-Expr"],[93,"impl-From%3Cf64%3E-for-Expr"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
